from aiogram import Bot, Dispatcher, Router
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, BotCommand, Message
from aiogram.filters import Command
from car_mod import Car
from automobile_calc import overall_electro_calc, overall_regular_calc, overall_atv_snowmobile_calc
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import logging
from datetime import datetime
import asyncio
import json
import os
from dotenv import load_dotenv
from redis import Redis
from database import User, Calculation, get_db, Request
from contextlib import contextmanager

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
if os.getenv('ENVIRONMENT') == 'production':
    logging.basicConfig(level=logging.WARNING)  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ WARNING –∏ –≤—ã—à–µ
else:
    logging.basicConfig(level=logging.INFO)     # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å INFO

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –¥–ª—è —Ö—Ä–∞pfr–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
# redis = Redis(
#     host=os.getenv("REDIS_HOST", "redis"),
#     port=int(os.getenv("REDIS_PORT", 6379)),
#     db=int(os.getenv("REDIS_DB", 0))
# )
# storage = RedisStorage(redis=redis)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()


# –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç
CURRENCIES = os.getenv("CURRENCIES").split(",")

# –°–ª–æ–≤–∞—Ä—å –º–µ—Å—è—Ü–µ–≤
MONTHS = json.loads(os.getenv("MONTHS", "{}"))

# –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–æ–∑—Ä–∞—Å—Ç–∞
AGE_CATEGORIES = {
    "–ú–µ–Ω—å—à–µ 3 –ª–µ—Ç": "<3",
    "–û—Ç 3 –¥–æ 5 –ª–µ—Ç": "3-5",
    "–ë–æ–ª—å—à–µ 5 –ª–µ—Ç": ">5"
}

# –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
VEHICLE_TYPES = {
    "üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å": "car",
    "üèç –ö–≤–∞–¥—Ä–æ—Ü–∏–∫–ª": "quad",
    "üõ∑ –°–Ω–µ–≥–æ—Ö–æ–¥": "snowmobile"
}

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_currency_keyboard():
    builder = ReplyKeyboardBuilder()
    for curr in CURRENCIES:
        builder.add(KeyboardButton(text=curr))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_months_keyboard():
    builder = ReplyKeyboardBuilder()
    for month in MONTHS.keys():
        builder.add(KeyboardButton(text=month))
    builder.adjust(3)
    return builder.as_markup(resize_keyboard=True)

def get_age_categories_keyboard():
    builder = ReplyKeyboardBuilder()
    for category in AGE_CATEGORIES.keys():
        builder.add(KeyboardButton(text=category))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def get_vehicle_types_keyboard():
    builder = ReplyKeyboardBuilder()
    for vehicle_type in VEHICLE_TYPES.keys():
        builder.add(KeyboardButton(text=vehicle_type))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

def get_main_menu_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç"))
    builder.add(KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏"))
    builder.add(KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)

# –≤–∞–ª–∏–¥–∏—Ä—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏  
def parse_float(value: str):
    try:
        return float(value)
    except ValueError:
        return None

def parse_int(value: str):
    try:
        return int(value)
    except ValueError:
        return None

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ–æ—Ä–º—ã
class CarForm(StatesGroup):
    vehicle_type = State()
    engine_type = State()
    currency = State()
    price = State()
    age_category = State()
    volume = State()
    power = State()

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ñ–æ—Ä–º—ã –∑–∞–ø—Ä–æ—Å–∞
class RequestForm(StatesGroup):
    name = State()
    phone = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        with get_db() as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
            
            if not existing_user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                new_user = User(
                    telegram_id=message.from_user.id,
                    username=message.from_user.username or ""
                )
                db.add(new_user)
                logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}")
            else:
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {message.from_user.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        logging.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")

    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø—Ä–∏ –≤–≤–æ–∑–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –†–æ—Å—Å–∏—é.")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞:", reply_markup=get_vehicle_types_keyboard())
    await state.set_state(CarForm.vehicle_type)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¢–°
@router.message(CarForm.vehicle_type)
async def process_vehicle_type(message: Message, state: FSMContext):
    if message.text not in VEHICLE_TYPES:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=get_vehicle_types_keyboard()
        )
        return
    
    vehicle_type = VEHICLE_TYPES[message.text]
    await state.update_data(vehicle_type=vehicle_type)
    
    # –î–ª—è –∫–≤–∞–¥—Ä–æ—Ü–∏–∫–ª–æ–≤ –∏ —Å–Ω–µ–≥–æ—Ö–æ–¥–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
    if vehicle_type in ['quad', 'snowmobile']:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–≤–∞–¥—Ä–æ—Ü–∏–∫–ª–æ–≤ –∏ —Å–Ω–µ–≥–æ—Ö–æ–¥–æ–≤
        await state.update_data(engine_type='gasoline')
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç—ã
        await state.set_state(state=CarForm.currency)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏:",
            reply_markup=get_currency_keyboard()
        )
    else:
        # –î–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è
        await state.set_state(state=CarForm.engine_type)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
        engine_types = {"–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π": "electric", "–ì–∏–±—Ä–∏–¥–Ω—ã–π": "hybrid", "–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π": "gasoline", "–î–∏–∑–µ–ª—å–Ω—ã–π": "diesel"}
        builder = ReplyKeyboardBuilder()
        for engine_type in engine_types.keys():
            builder.add(KeyboardButton(text=engine_type))
        builder.adjust(1)  # –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
@router.message(CarForm.engine_type)
async def process_engine_type(message: Message, state: FSMContext):
    engine_types = {"–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π": "electric", "–ì–∏–±—Ä–∏–¥–Ω—ã–π": "hybrid", "–ë–µ–Ω–∑–∏–Ω–æ–≤—ã–π": "gasoline", "–î–∏–∑–µ–ª—å–Ω—ã–π": "diesel"}
    if message.text not in engine_types:
        builder = ReplyKeyboardBuilder()
        for engine_type in engine_types.keys():
            builder.add(KeyboardButton(text=engine_type))
        builder.adjust(1)  # –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        return
    
    engine_type = engine_types[message.text]
    await state.update_data(engine_type=engine_type)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç—ã
    await state.set_state(state=CarForm.currency)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏:",
        reply_markup=get_currency_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–∞–ª—é—Ç—ã
@router.message(CarForm.currency)
async def process_currency(message: Message, state: FSMContext):
    if message.text not in CURRENCIES:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=get_currency_keyboard()
        )
        return
    
    await state.update_data(currency=message.text)
    await state.set_state(state=CarForm.price)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", 
        reply_markup=ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã
@router.message(CarForm.price)
async def process_price(message: Message, state: FSMContext):
    price = parse_float(message.text)
    if price is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
        
    if price <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    await state.update_data(price=price)
    
    # –î–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¢–° –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await state.set_state(state=CarForm.age_category)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞:",
        reply_markup=get_age_categories_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(CarForm.age_category)
async def process_age_category(message: Message, state: FSMContext):
    category_name = message.text
    if category_name not in AGE_CATEGORIES:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=get_age_categories_keyboard()
        )
        return
        
    age_category = AGE_CATEGORIES[category_name]
    await state.update_data(age_category=age_category)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–µ –¢–° –∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è
    data = await state.get_data()
    
    # –î–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –∏ –≥–∏–±—Ä–∏–¥–æ–≤ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ—â–Ω–æ—Å—Ç—å
    if data.get('engine_type') in ['electric', 'hybrid']:
        await state.update_data(volume=0)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ 0
        await state.set_state(state=CarForm.power)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ –ª.—Å. (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¢–° –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è
        await state.set_state(state=CarForm.volume)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ —Å–º¬≥.\n–ù–∞–ø—Ä–∏–º–µ—Ä: 1500",
            reply_markup=ReplyKeyboardRemove()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞
@router.message(CarForm.volume)
async def process_volume(message: Message, state: FSMContext):
    volume = parse_float(message.text)
    if volume is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
        
    if volume <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.\n–ù–∞–ø—Ä–∏–º–µ—Ä: 1500")
        return
    
    await state.update_data(volume=volume)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–µ –¢–° –∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è
    data = await state.get_data()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—â–Ω–æ—Å—Ç—å –≤ 0 –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    data['power'] = 0
    await state.update_data(power=data['power'])
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    await finalize_calculation(message, state, data)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –º–æ—â–Ω–æ—Å—Ç–∏ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
@router.message(CarForm.power)
async def process_power(message: Message, state: FSMContext):
    power = parse_float(message.text)
    if power is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
        
    if power <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–æ—â–Ω–æ—Å—Ç—å
    data = await state.get_data()
    data['power'] = power
    await state.update_data(power=power)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    await finalize_calculation(message, state, data)

async def finalize_calculation(message: Message, state: FSMContext, data: dict):
    try:
        safe_data = data.copy()
        car = Car(
            price=safe_data['price'],
            volume=safe_data['volume'],
            currency=safe_data['currency'],
            power=safe_data['power'],
            age_category=safe_data['age_category'],
            vehicle_type=safe_data['vehicle_type'],
            engine_type=safe_data['engine_type']
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å—á–µ—Ç–∞
        if safe_data['vehicle_type'] in ['quad', 'snowmobile']:
            fees = overall_atv_snowmobile_calc(car)
        elif safe_data['engine_type'] in ['electric', 'hybrid']:
            fees = overall_electro_calc(car)
        else:
            fees = overall_regular_calc(car)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π
        required_keys = ['total', 'customs_duty', 'customs_fee', 'util_fee', 'excise_tax', 'vat']
        missing_keys = [key for key in required_keys if key not in fees]
        if missing_keys:
            logging.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –≤ —Ä–∞—Å—á–µ—Ç–µ", extra={
                'user_id': message.from_user.id,
                'missing_keys': missing_keys,
                'calculation_type': safe_data['vehicle_type']
            })
            raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏: {missing_keys}")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        age_category_name = next(name for name, code in AGE_CATEGORIES.items() if code == safe_data['age_category'])
        vehicle_type_name = next(name for name, code in VEHICLE_TYPES.items() if code == safe_data['vehicle_type'])
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        response = (
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:\n\n"
            f"–¢–∏–ø –¢–°: {vehicle_type_name}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {car.price} {car.currency}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {age_category_name}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞
        if safe_data['engine_type'] in ['electric', 'hybrid']:
            response += f"–ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car.power} –ª.—Å.\n"
        else:
            response += f"–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {car.volume} —Å–º¬≥\n"
        
        response += (
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö: {car.rub_price:.2f} ‚ÇΩ\n\n"
            f"–û–±—â–∞—è —Å—É–º–º–∞ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {fees['total']:.2f} ‚ÇΩ\n\n"
            f"<b>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:</b>\n"
            f"- –¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞: {fees['customs_duty']:.2f} ‚ÇΩ\n"
            f"- –¢–∞–º–æ–∂–µ–Ω–Ω—ã–π —Å–±–æ—Ä: {fees['customs_fee']:.2f} ‚ÇΩ\n"
            f"- –£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä: {fees['util_fee']:.2f} ‚ÇΩ\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏–∑–µ –∏ –ù–î–° —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –∏ –≥–∏–±—Ä–∏–¥–æ–≤
        if safe_data['engine_type'] in ['electric', 'hybrid']:
            response += (
                f"- –ê–∫—Ü–∏–∑–Ω—ã–π —Å–±–æ—Ä: {fees['excise_tax']:.2f} ‚ÇΩ\n"
                f"- –ù–î–°: {fees['vat']:.2f} ‚ÇΩ\n"
            )

        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer(
            response + "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.clear()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            with get_db() as db:
                user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
                if not user:
                    user = User(
                        telegram_id=message.from_user.id,
                        username=message.from_user.username
                    )
                    db.add(user)
                
                calculation = Calculation(
                    telegram_id=message.from_user.id,
                    vehicle_type=safe_data['vehicle_type'],
                    engine_type=safe_data['engine_type'],
                    price=safe_data['price'],
                    currency=safe_data['currency'],
                    age_category=safe_data['age_category'],
                    total_fees=fees['total'],
                    customs_duty=fees['customs_duty'],
                    customs_fee=fees['customs_fee'],
                    util_fee=fees['util_fee'],
                    excise_tax=fees['excise_tax'],
                    vat=fees['vat']
                )
                db.add(calculation)
                logging.info("–†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", extra={
                    'user_id': message.from_user.id,
                    'calculation_id': calculation.id
                })
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—á–µ—Ç–∞", extra={
                'user_id': message.from_user.id,
                'error': str(e),
                'calculation_data': safe_data
            })
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await state.clear()
            return

    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ", extra={
            'user_id': message.from_user.id,
            'error': str(e),
            'calculation_data': safe_data
        })
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.clear()
        return

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
async def set_commands(bot: Bot):
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    commands = [
        BotCommand(
            command="start",
            description="–ù–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç"
        ),
        BotCommand(
            command="info",
            description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏"
        ),
        BotCommand(
            command="request",
            description="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
        )
    ]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await bot.set_my_commands(commands)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–º–∞–Ω–¥
    logging.info("–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
@router.message(Command(commands=["info"]))
async def cmd_info(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        if current_state.startswith("CarForm"):
            await message.answer("‚ö†Ô∏è –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω.")
        elif current_state.startswith("RequestForm"):
            await message.answer("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω.")
    
    await message.answer(
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏:\n\n"
        "–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø–æ–º–æ—â–∏ –≤ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –∫–≤–∞–¥—Ä–æ—Ü–∏–∫–ª–æ–≤ –∏ —Å–Ω–µ–≥–æ—Ö–æ–¥–æ–≤. "
        "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –ø–æ —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.\n\n"
        "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n"
        "üìß Email: info@example.com\n"
        "üåê –°–∞–π—Ç: www.example.com\n"
        "üìç –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 123",
        reply_markup=get_main_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /request
@router.message(Command(commands=["request"]))
async def cmd_request(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    current_state = await state.get_state()
    if current_state is not None and current_state.startswith("CarForm"):
        await state.clear()
        await message.answer("‚ö†Ô∏è –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω.")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    await state.set_state(RequestForm.name)
    await message.answer(
        "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏–ª–∏ —É—Å–ª—É–≥–∏ –ø–æ —Ä–∞—Å—Ç–∞–º–æ–∂–∫–µ, "
        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(RequestForm.name)
async def process_name(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await state.update_data(name=message.text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state(RequestForm.phone)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router.message(RequestForm.phone)
async def process_phone(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not is_valid_phone(message.text):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "
            "–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 7 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —Ü–∏—Ñ—Ä—ã, +, -, –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∫–æ–±–∫–∏."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(phone=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        with get_db() as db:
            request = Request(
                telegram_id=message.from_user.id,
                name=data['name'],
                phone=data['phone']
            )
            db.add(request)
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        logging.exception("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:")
    
    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É!\n\n"
        f"–ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n\n"
        f"–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏.",
        reply_markup=get_main_menu_keyboard()
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—á–µ—Ç–∞
async def start_calculation(message: Message, state: FSMContext):
    await state.set_state(state=CarForm.vehicle_type)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞:",
        reply_markup=get_vehicle_types_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def is_valid_phone(phone: str) -> bool:
    import re
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, +, -, –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∫–æ–±–∫–∏
    # –∏ –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –æ—Ç 7 –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤
    pattern = r'^[0-9\+\-\(\)\s]{7,20}$'
    return bool(re.match(pattern, phone))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏"
@router.message(lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏")
async def text_info(message: Message, state: FSMContext):
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
    await cmd_info(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"
@router.message(lambda message: message.text == "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def text_request(message: Message, state: FSMContext):
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /request
    await cmd_request(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "–ù–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç"
@router.message(lambda message: message.text == "–ù–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç")
async def text_start_calculation(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        if current_state.startswith("CarForm"):
            await message.answer("‚ö†Ô∏è –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")
        elif current_state.startswith("RequestForm"):
            await message.answer("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç.")
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç
    await start_calculation(message, state)

# –ò–∑–º–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü–∏—é main
async def main():
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp = Dispatcher()
    
    # –í–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    await set_commands(bot)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
